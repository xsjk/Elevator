<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int N = 2;
const int num = 3;
const int door_move_time = 1;
const int door_stay_time = 2;
const int floor_travel_time = 2;

// Floor: 0, 1, 2, 3
// Direction: 0:up 1:down 2:idle
// ElevatorState: 0:moving_up 1:moving_down 2:stopped_door_closed 3:stopped_door_opened 4:opening_door 5:closing_door
// DoorState: 0:opened 1:closed 2:opening 3:closing
typedef int[0,N-1] ElevatorID;
typedef int[0,num-1] UserID;
typedef int[0, 3] Floor;
typedef int[0, 2] Direction;
typedef int[0, 5] ElevatorState;

bool door_idle_event[N] = {true, true};
ElevatorState Ele_state[N] = {2, 2};
Floor Ele_cur_floor[N] = {1, 1};
Direction Ele_direction[N] = {2, 2};

typedef bool Targets[4];
Targets up_floors[N] = {{false, false, false, false}, {false, false, false, false}};
Targets down_floors[N] = {{false, false, false, false}, {false, false, false, false}};

broadcast chan open_door[N], close_door[N];

int door_time[N] = {0, 0};
int Ele_time[N] = {0, 0};

Floor user_floor[num];
Floor user_to[num];
ElevatorID user_elevator[num];
</declaration>
	<template>
		<name>Door</name>
		<parameter>ElevatorID id</parameter>
		<declaration>clock t;</declaration>
		<location id="id0" x="-433" y="-17">
			<name x="-561" y="-34">Door_closed</name>
		</location>
		<location id="id1" x="-144" y="-204">
			<name x="-238" y="-246">Opening_door</name>
			<label kind="invariant" x="-221" y="-221">t &lt;= 1</label>
		</location>
		<location id="id2" x="144" y="-8">
			<name x="161" y="-51">Stopped_door_opened</name>
			<label kind="invariant" x="161" y="-25">t &lt;= 1</label>
		</location>
		<location id="id3" x="-144" y="204">
			<name x="-144" y="221">Closing_door</name>
			<label kind="invariant" x="-127" y="238">t &lt;= 1</label>
		</location>
		<location id="id4" x="144" y="-204">
			<committed/>
		</location>
		<location id="id5" x="314" y="204">
			<committed/>
		</location>
		<location id="id6" x="-433" y="212">
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id7">
			<source ref="id6"/>
			<target ref="id0"/>
			<label kind="guard" x="-612" y="42">door_time[id] == door_move_time</label>
			<label kind="assignment" x="-612" y="68">Ele_state[id] = 2,
door_idle_event[id] = true,
door_time[id] = 0</label>
		</transition>
		<transition id="id8">
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="guard" x="-416" y="161">door_time[id] &lt; door_move_time</label>
			<nail x="-365" y="170"/>
			<nail x="-204" y="170"/>
		</transition>
		<transition id="id9">
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="assignment" x="-450" y="263">door_time[id] = door_time[id] + 1,
t = 0</label>
			<nail x="-212" y="254"/>
			<nail x="-365" y="255"/>
		</transition>
		<transition id="id10">
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-8" y="187">door_time[id] == door_stay_time</label>
			<label kind="assignment" x="-8" y="212">Ele_state[id] = 5,
door_time[id] = 0</label>
		</transition>
		<transition id="id11">
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="guard" x="42" y="136">door_time[id] &lt; door_stay_time</label>
			<nail x="212" y="153"/>
			<nail x="136" y="59"/>
		</transition>
		<transition id="id12">
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="assignment" x="280" y="25">door_time[id] = door_time[id] + 1,
t = 0</label>
			<nail x="221" y="8"/>
			<nail x="306" y="110"/>
		</transition>
		<transition id="id13">
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-127" y="-170">door_time[id] &lt; door_move_time</label>
			<nail x="59" y="-170"/>
			<nail x="-51" y="-170"/>
		</transition>
		<transition id="id14">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="assignment" x="-110" y="-297">door_time[id] = door_time[id] + 1,
t = 0</label>
			<nail x="-59" y="-255"/>
			<nail x="59" y="-255"/>
		</transition>
		<transition id="id15">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="144" y="-153">door_time[id] == door_move_time</label>
			<label kind="assignment" x="144" y="-127">Ele_state[id] = 3,
door_time[id] = 0</label>
		</transition>
		<transition id="id16">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-42" y="51">close_door[id]?</label>
			<label kind="assignment" x="-42" y="76">Ele_state[id] = 5,
t = 0,
door_time[id] = 0</label>
			<nail x="85" y="34"/>
			<nail x="-102" y="170"/>
		</transition>
		<transition id="id17">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-204" y="-51">open_door[id]?</label>
			<label kind="assignment" x="-297" y="-25">Ele_state[id] = 4,t = 0,
door_time[id] = door_move_time - door_time[id]</label>
		</transition>
		<transition id="id18">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-399" y="-161">Ele_state[id] == 2</label>
			<label kind="synchronisation" x="-399" y="-136">open_door[id]?</label>
			<label kind="assignment" x="-399" y="-110">Ele_state[id] = 4,
door_idle_event[id] = false,
t = 0</label>
		</transition>
	</template>
	<template>
		<name>User</name>
		<parameter>UserID uid</parameter>
		<declaration>clock t;

bool check_elevator(Direction call_direction){
    ElevatorID elein = user_elevator[uid];
    if ((Ele_direction[elein] == call_direction) &amp;&amp; (Ele_cur_floor[elein] == user_floor[uid]) &amp;&amp; (Ele_time[elein] == 0)){
        return true;
    }
    if ((Ele_direction[elein] == 2) &amp;&amp; (Ele_cur_floor[elein] == user_floor[uid]) &amp;&amp; (Ele_time[elein] == 0)){
        return true;
    }
    return false;
}

bool check_reach(){
    ElevatorID elein = user_elevator[uid];
    if ((Ele_cur_floor[elein] == user_to[uid]) &amp;&amp; (Ele_time[elein] == 0)){
        return true;
    }
    return false;
}

// controller
int estimate_door_open_time(ElevatorID id){
    int open_time = door_move_time + door_stay_time;
    if (Ele_state[id] == 4){
        open_time = door_move_time + door_stay_time - door_time[id];
    }else if(Ele_state[id] == 3){
        open_time = door_stay_time - door_time[id];
    }else if(Ele_state[id] == 5){
        open_time = door_time[id] + door_stay_time;
    }
    return open_time;
}

int estimate_door_close_time(ElevatorID id){
    int close_time = 0;
    if (Ele_state[id] == 4){
        close_time = door_move_time*2 + door_stay_time - door_time[id];
    }else if(Ele_state[id] == 3){
        close_time = door_stay_time + door_move_time - door_time[id];
    }else if(Ele_state[id] == 5){
        close_time = door_move_time - door_time[id];
    }
    return close_time;
}



int i = 0;
int total_door_time = door_move_time*2 + door_stay_time;

// function: estimate_arrival_time arrival_summary calculate_duration
int estimate_arrival_time(ElevatorID id, Floor call_floor, Direction call_direction){
    int arrival_time = 0;
    int cur_pos = Ele_cur_floor[id];
    int cur_dir = Ele_direction[id];
    int passed = Ele_time[id];
    int iter_floor = cur_pos;

    if ( Ele_state[id] == 0 or Ele_state[id] == 1 ){
        arrival_time = door_move_time + door_stay_time;
    }else if((call_floor == cur_pos) &amp;&amp; (cur_dir == call_direction or cur_dir == 2)){
        return estimate_door_open_time(id);
    }else{
        // not stopped at the same floor
        arrival_time = estimate_door_close_time(id) + door_move_time + door_stay_time;
    } 

    if (cur_dir == 2){
        if (cur_pos &gt; call_floor){
            arrival_time += (cur_pos - call_floor)*floor_travel_time;
        }else{
            arrival_time += (call_floor - cur_pos)*floor_travel_time;
        }
    }

    if (cur_dir = 0){
        //cur_pos -&gt; 3
        for (i = cur_pos + 1; i &lt; 4; i++){
            if ((i == call_floor) &amp;&amp; (call_direction == 0)){
                arrival_time += floor_travel_time*(i - iter_floor);
                arrival_time -= passed;
                return arrival_time;
            }
            if ((call_direction == 1) &amp;&amp; (i == 3) &amp;&amp; (call_floor == 3)){
                arrival_time += floor_travel_time*(i - iter_floor);
                arrival_time -= passed;
                return arrival_time;
            }
            if (up_floors[id][i] == true){
                arrival_time += total_door_time;
                arrival_time += floor_travel_time*(i - iter_floor);
                iter_floor = i;
            }
        }
        // 3 -&gt; 0
        for (i = 2; i &gt;= 0; i--){
            if ((i == call_floor) &amp;&amp; (call_direction == 1)){
                if (iter_floor &lt;= i){
                    arrival_time += floor_travel_time*(i - iter_floor);
                }else{
                    arrival_time += floor_travel_time*(iter_floor - i);
                }  
                arrival_time -= passed;
                return arrival_time;
            }
            if ((i == 0) &amp;&amp; (call_floor == 0) &amp;&amp; (call_direction == 0)){
                arrival_time += floor_travel_time*(iter_floor - i); 
                arrival_time -= passed;
                return arrival_time;
            }
            if (up_floors[id][i] == true){
                arrival_time += total_door_time;
                if (iter_floor &lt;= i){
                    arrival_time += floor_travel_time*(i - iter_floor);
                }else{
                    arrival_time += floor_travel_time*(iter_floor - i);
                }               
                iter_floor = i;
            }
        }
        // 0 -&gt; cur_pos
        for (i = 1; i &lt;= cur_pos; i++){
            if ((i == call_floor) &amp;&amp; (call_direction == 0)){
                if (iter_floor &lt;= i){
                    arrival_time += floor_travel_time*(i - iter_floor);
                }else{
                    arrival_time += floor_travel_time*(iter_floor - i);
                }  
                arrival_time -= passed;
                return arrival_time;
            }
            if (up_floors[id][i] == true){
                arrival_time += total_door_time;
                if (iter_floor &lt;= i){
                    arrival_time += floor_travel_time*(i - iter_floor);
                }else{
                    arrival_time += floor_travel_time*(iter_floor - i);
                }  
                iter_floor = i;
            }
        }
    }else if (cur_dir == 1){
        // cur_pos -&gt; 0
        for(i = cur_pos - 1; i &gt;= 0; i--){
            if ((call_floor == i) &amp;&amp; (call_direction == 1)){
                arrival_time += floor_travel_time*(iter_floor - i);
                arrival_time -= passed;
                return arrival_time;
            }
            if ((call_floor == 0) &amp;&amp; (i == 0) &amp;&amp; (call_direction == 0)){
                arrival_time += floor_travel_time*(iter_floor - i);
                arrival_time -= passed;
                return arrival_time;
            }
            if (down_floors[id][i] == true){
                arrival_time += total_door_time;
                arrival_time += floor_travel_time*(iter_floor - i);
                iter_floor = i;
            }
        }

        for(i = 1; i &lt; 4; i++){
            if ((call_floor == i) &amp;&amp; (call_direction == 0)){
                if (iter_floor &lt;= i){
                    arrival_time += floor_travel_time*(i - iter_floor);
                }else{
                    arrival_time += floor_travel_time*(iter_floor - i);
                }  
                arrival_time -= passed;
                return arrival_time;
            }
            if ((i == 3) &amp;&amp; (call_floor == 3) &amp;&amp; (call_direction == 1)){
                arrival_time += floor_travel_time*(i - iter_floor);
                arrival_time -= passed;
                return arrival_time;
            }
            if (up_floors[id][i] == true){
                arrival_time += total_door_time;
                if (iter_floor &lt;= i){
                    arrival_time += floor_travel_time*(i - iter_floor);
                }else{
                    arrival_time += floor_travel_time*(iter_floor - i);
                }               
                iter_floor = i;
            }
        }

        for (i = 2; i &gt;= cur_pos; i--){
            arrival_time += floor_travel_time;
            if ((call_floor == i) &amp;&amp; (call_direction == 1)){
                if (iter_floor &lt;= i){
                    arrival_time += floor_travel_time*(i - iter_floor);
                }else{
                    arrival_time += floor_travel_time*(iter_floor - i);
                }  
                arrival_time -= passed;
                return arrival_time;
            }
            if (down_floors[id][i] == true){
                arrival_time += total_door_time;
                if (iter_floor &lt;= i){
                    arrival_time += floor_travel_time*(i - iter_floor);
                }else{
                    arrival_time += floor_travel_time*(iter_floor - i);
                }               
                iter_floor = i;
            }
        }
    }
    
    return arrival_time;

}

int wait_time1;
int wait_time2;
int open_signal = -1;
void call_elevator(Floor call_floor, Direction call_direction){  
    wait_time1 = estimate_arrival_time(0, call_floor, call_direction);   
    wait_time2 = estimate_arrival_time(1, call_floor, call_direction);
    open_signal = -1;
    user_floor[uid] = call_floor;
    if (wait_time1 &lt;= wait_time2){
        user_elevator[uid] = 0;
        if ((call_floor == Ele_cur_floor[0]) &amp;&amp; (Ele_time[0] == 0) &amp;&amp; (Ele_direction[0] == call_direction)){
            open_signal = 0;
            return;
        }
        if ((call_floor == Ele_cur_floor[0]) &amp;&amp; (Ele_time[0] == 0) &amp;&amp; (Ele_direction[0] == 2)){
            open_signal = 0;
            return;
        }
        if (call_direction == 0){ 
            up_floors[0][call_floor] = true;
            return;
        }else if (call_direction == 1){
            down_floors[0][call_floor] = true;
            return;
        }
    }else if(wait_time1 &gt; wait_time2){
        user_elevator[uid] = 1;
        if ((call_floor == Ele_cur_floor[1]) &amp;&amp; (Ele_time[1] == 0) &amp;&amp; (Ele_direction[0] == call_direction)){
            open_signal = 1;
            return ;
        }
        if ((call_floor == Ele_cur_floor[1]) &amp;&amp; (Ele_time[1] == 0) &amp;&amp; (Ele_direction[0] == 2)){
            open_signal = 0;
            return;
        }
        if (call_direction == 0){ 
            up_floors[1][call_floor] = true;
            return;
        }else if (call_direction == 1){
            down_floors[1][call_floor] = true;
            return;
        }
    }
    return;
}

void selectto(Floor wantfloor, Direction godir){
    user_to[uid] = wantfloor;
    if (godir == 0){
        up_floors[user_elevator[uid]][wantfloor] = true;
    }else{
        down_floors[user_elevator[uid]][wantfloor] = true;
    }
    return;
}
</declaration>
		<location id="id19" x="-4352" y="-3799">
			<name x="-4377" y="-3833">Inside</name>
		</location>
		<location id="id20" x="-4148" y="-3799">
			<name x="-4158" y="-3833">OpenDoor</name>
			<urgent/>
		</location>
		<location id="id21" x="-4573" y="-3799">
			<name x="-4615" y="-3833">CloseDoor</name>
			<urgent/>
		</location>
		<init ref="id19"/>
		<transition id="id22">
			<source ref="id21"/>
			<target ref="id19"/>
			<nail x="-4522" y="-3859"/>
			<nail x="-4403" y="-3859"/>
		</transition>
		<transition id="id23">
			<source ref="id20"/>
			<target ref="id19"/>
			<nail x="-4190" y="-3859"/>
			<nail x="-4309" y="-3859"/>
		</transition>
		<transition id="id24">
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-4530" y="-3825">close_door[uid]!</label>
		</transition>
		<transition id="id25">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-4309" y="-3825">open_door[uid]!</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Door1 = Door(0);
User1 = User(0);
// List one or more processes to be composed into a system.
system Door1, User1;
</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula>A&lt;&gt; ((User1.OpenDoor &amp;&amp; Door1.Closing_door) imply Door1.Opening_door)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-06-08 00:12:33 +0800">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; ((User1.OpenDoor &amp;&amp; Door1.Door_closed) imply Door1.Opening_door)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-06-08 00:19:57 +0800">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; ((User1.CloseDoor &amp;&amp; Door1.Stopped_door_opened) imply Door1.Closing_door)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-06-08 00:20:06 +0800">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; Door1.Stopped_door_opened</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-06-08 00:20:09 +0800">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
	</queries>
</nta>
