@startuml usecase

left to right direction

actor User as user

rectangle "Elevator System" {
    usecase "Go up" as goUp
    usecase "Go down" as goDown
    usecase "Open door" as openDoor
    usecase "Close door" as closeDoor
    usecase "Go to floor" as goToFloor
    usecase "Get elevator" as getElevator
    usecase "Get elevator floor" as getElevatorFloor
}

user --> goUp
user --> goDown
user --> openDoor
user --> closeDoor
user --> goToFloor
user --> getElevator
user --> getElevatorFloor

@enduml

@startuml class

class FloorPanel {
    -floors: Int[]
    +goingUp: Bool
    +goingDown: Bool
    +goUp()
    +goDown()
}
class ElevatorPanel {
    +goto(floor: Int)
    +openDoor()
    +closeDoor()
}
class Elevator {
    +state: Enum
    +floor: Int
    +targetFloors: Int[]
    +goUp()
    +goDown()
    +openDoor()
    +closeDoor()
}
class ElevatorControl {
    +requestElevator(from: Int, to: Int): Elevator
    +moveElevator(elevator: Elevator, to: Int)
}

FloorPanel "3" <--> "1" ElevatorControl : "messages"
FloorPanel "3" <-- "1" Elevator: "messages"
ElevatorPanel "1" --* "1" Elevator
ElevatorPanel "2" <--> "1" ElevatorControl : "messages"
ElevatorControl "1" --> "2" Elevator : "controls"

@enduml

@startuml sequence

skinparam sequenceMessageAlign center

participant User as user
participant Elevator as elevator
participant ElevatorControl as elevatorControl

user -> elevator: Go up from floor 1
elevator -> elevatorControl: Request elevator to go up from floor 1
elevatorControl --> elevator: Dispatch elevator to floor 1
elevator --> user: Elevator is going down to floor 1
user -> elevator: Go to floor 3
elevator -> elevatorControl: Request elevator to go to floor 3
elevatorControl --> elevator: Dispatch elevator to floor 3
elevator --> user: Elevator is going to floor 3

@enduml